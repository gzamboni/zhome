

resource "kubernetes_namespace" "frameos" {
  metadata {
    name = "frameos"
  }
}

resource "kubernetes_persistent_volume_claim" "frameos_data" {
  metadata {
    name      = "frameos-data"
    namespace = kubernetes_namespace.frameos.metadata.0.name
  }
  spec {
    access_modes = ["ReadWriteOnce"]
    resources {
      requests = {
        storage = "2Gi"
      }
    }
    storage_class_name = "longhorn-ssd"
  }
}

resource "kubernetes_secret" "frameos_secret_key" {
  metadata {
    name      = "frameos-secret-key"
    namespace = kubernetes_namespace.frameos.metadata.0.name
  }
  data = {
    secret-key = var.secret_key
  }
}

resource "kubernetes_deployment" "frameos_controller" {
  metadata {
    name = "frameos-controller"
    labels = {
      App = "frameos"
    }
    namespace = kubernetes_namespace.frameos.metadata.0.name
  }

  spec {
    replicas = 1
    selector {
      match_labels = {
        App = "frameos"
      }
    }
    template {
      metadata {
        labels = {
          App = "frameos"
        }
      }
      spec {
        volume {
          name = "frameos-data"
          persistent_volume_claim {
            claim_name = kubernetes_persistent_volume_claim.frameos_data.metadata.0.name
          }
        }
        container {
          image = "frameos/frameos:latest"
          name  = "frameos-controller"

          port {
            container_port = 8989
          }

          resources {
            limits = {
              cpu    = "0.5"
              memory = "512Mi"
            }
            requests = {
              cpu    = "250m"
              memory = "50Mi"
            }
          }
          volume_mount {
            name       = "frameos-data"
            mount_path = "/app/db"
          }

          env {
            name = "SECRET_KEY"
            value_from {
              secret_key_ref {
                name = kubernetes_secret.frameos_secret_key.metadata.0.name
                key  = "secret-key"
              }
            }
          }
        }
      }
    }
  }
}

resource "kubernetes_ingress" "frameos_ingress" {
  metadata {
    name      = "frameos-ingress"
    namespace = kubernetes_namespace.frameos.metadata.0.name
    annotations = {
      "kubernetes.io/ingress.class" = "traefik"
    }
  }
  spec {
    rule {
      host = "frameos.k3s.zhome.local"
      http {
        path {
          path = "/"
          backend {
            service_name = kubernetes_deployment.frameos_controller.metadata.0.name
            service_port = kubernetes_deployment.frameos_controller.spec.0.template.0.spec.0.container.0.port.0.container_port
          }
        }
      }
    }
  }
}
